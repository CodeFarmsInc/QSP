
// -------- data structure DOUBLY LINKED RING ---------------
// EQUIVALENT OF:
// template <class Node> class $$_Ring2
// ----------------------------------------------------------
// Ring2 could be derived from Ring2 through inheritance, but
//  (a) The complex functions (sort, remove, merge) are different anyway,
//  (b) we want to minimize the nubmer of classes which will be code generated.
// For these two reasons, Ring2 is coded as a base class.
// ----------------------------------------------------------
#ifndef ZZ_$$_RING2_INCLUDED
#define ZZ_$$_RING2_INCLUDED

@class $1;

typedef int (*ZZsortFun)(const void *, const void *);

// ----------------------------------------------------------
// description of the cooperating classes
// ----------------------------------------------------------
#define $$_Ring2Element \
    $1* $$_next;  \
    $1* $$_prev

#define $$_Ring2Element_ptrList \
    $0.next=ONE;  \
    $0.prev=ONE


@interface $$_Ring2 
+ (int) debugFun: ($1*) tail;
+ ($1*) addHead: ($1*) tail add: ($1*) c; // returns new tail
+ ($1*) addTail: ($1*) tail add: ($1*) c; // returns new tail
+ ($1*) append: ($1*) tail after: ($1*) c1 add: ($1*) c2; // returns new tail
+ (void) insert: ($1*) c1 before: ($1*) c2; // insert c1 before c2
+ ($1*) remove: ($1*) tail elem: ($1*) c;  // returns new tail, NULL when empty
+ ($1*) next: ($1*) tail elem: ($1*) c; // returns NULL when c is the tail
+ ($1*) prev: ($1*) tail elem: ($1*) c; // returns NULL when c is the head
+ ($1*) nextRing: ($1*) c; // next in the ring
+ ($1*) prevRing: ($1*) c; // previous in the ring
+ ($1*) sort: (ZZsortFun) cmpFun tail: ($1*) tail; // returns the new tail
+ (void) merge: ($1*) s second: ($1*) t;
@end

@interface $$_Ring2Iterator : NSObject
{
$1 *tail; // NULL when loop finished
$1 *nxt;  // NULL when starting a new loop
int dir;  // 0=from head, 1=from tail
}
// standard interface:          for(p=it.fromHead(x); p; p=it.next()){...}
//                              for(p=it.fromTail(x); p; p=it.prev()){...}
- init;
- ($1*) fromHead: ($1*) p;
- ($1*) fromTail: ($1*) p;
- ($1*) next;
@end

#endif // ZZ_$$_RING2_INCLUDED
